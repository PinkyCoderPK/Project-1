#include<bits/stdc++.h>
using namespace std;

int n, x;
vector<int> a, b;
int u, v;
string s;

int check(int val, vector<int> v)
{
    auto it = find(v.begin(),v.end(),val);
    return it - v.begin();
}


int main()
{
     // Week 3 - Linked List Manipulation
    //freopen("test.inp","r",stdin);
    //freopen("test.out","w",stdout);
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);

    cin >> n;
    for (int i = 1; i <= n; i++)
    {
        cin >> x;
        a.push_back(x);
    }

    while ( cin >> s )
    {
        //for (int i = 0; i < a.size(); i++)
        //        cout << a[i] <<" ";
        //cout <<"\n";
        if ( s == "#" )
        {
            for (int i = 0; i < a.size(); i++)
                cout << a[i] <<" ";
            return 0;
        }
        if ( s == "addlast" )
        {
            cin >> u;
            if ( check(u,a) == a.size() ) a.push_back(u);
        }
        else if ( s == "addfirst" )
        {
            cin >> u;
            if ( check(u,a) == a.size() ) a.insert(a.begin(),u);
        }
        else if ( s == "addafter" )
        {
            cin >> u >> v;
            int vt1 = check(v,a), vt2 = check(u,a);
            if ( vt1 != a.size() && vt2 == a.size() )
            {
                auto it = find(a.begin(),a.end(),v);
                it ++;
                a.insert(it,u);
            }
        }
        else if ( s == "addbefore" )
        {
            cin >> u >> v;
            int vt1 = check(v,a), vt2 = check(u,a);
            if ( vt1 != a.size() && vt2 == a.size() )
            {
                auto it = find(a.begin(),a.end(),v);
                a.insert(it,u);
            }
        }
        else if ( s == "remove" )
        {
            cin >> u;
            auto it = find(a.begin(),a.end(),u);
            if ( it != a.end() ) a.erase(it);
        }
        else
        {
            b.clear();
            for (int i = int(a.size())-1; i >= 0; i--)
                b.push_back(a[i]);
            a = b;
        }
    }
}
